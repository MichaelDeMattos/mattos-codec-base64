#!/usr/bin/env python
# -*- coding: utf-8 -*-

import gi
import os
import time
import zlib
import base64

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

ui = Gtk.Builder()
jn_b64_decode = base64.b64decode(b'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')
jn_decompress = zlib.decompress(jn_b64_decode)
ui.add_from_string(jn_decompress.decode("utf-8"))

"""
Copyright (C) 
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

Author: Michael de Mattos
"""

class Handler(object):
    def __init__(self, *args, **kwargs):
        super(Handler, self).__init__(*args, **kwargs)
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    # --> Window
        self.main_window = ui.get_object("main_window")
     
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
	# --> toolbar
        self.bt_convert = ui.get_object("bt_convert")
        self.bt_exit = ui.get_object("bt_exit")
        
    # --> Label
        self.lb_result = ui.get_object("lb_result")
    
    # --> Entry text
        self.archive = ui.get_object("archive")
        self.name_project = ui.get_object("name_project")
        self.path_destin = ui.get_object("path_destin")
    
    # --> Gtk dialog
        self.dialog = ui.get_object("dialog")
        self.var_global = ""
        
        
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    # --> Functions
    
    #Function ends program execution    
    def on_bt_exit_clicked(self, *args):
        Gtk.main_quit()
    
    #Function ends program execution
    def on_main_window_destroy(self, *args):
        Gtk.main_quit()
    
    #Function converts and compresses
    #the file generated by the glade
    def on_bt_convert_clicked(self, *args):
        print("convert")
        
        #Function that initiates conversion
        #And compression to base 64
        def run_codec_base64():
            try:
                archive = self.archive.get_text()
                name_project = self.name_project.get_text()
                path = self.path_destin.get_text()
                
                with open(archive, "rb") as file:
                    data = file.read()
                    compress = zlib.compress(data)
                    codec_base64 = base64.b64encode(compress)
                    
                    path_archive = open(path + name_project, 'w')
                    path_archive.write(str(codec_base64))
                    path_archive.close()
                    
                    self.lb_result.set_text("Sucess!!!")
                    self.var_global = (path + name_project)
                    
                    self.dialog.set_transient_for(self.main_window)
                    self.dialog.set_modal(True)
                    self.dialog.set_destroy_with_parent(True)
                    self.dialog.show_all()
                    
                print("archive: " + archive)
                print("name_project: " + name_project)
            
            except Exception as ex:
                print("Erro")
                msg_add = ("You can also send the error log to the email: chelmto2000@gmail.com\n"
                           "Error log is in the directory: /tmp/mattos-codec-base64.txt")
                           
                self.lb_result.set_text("Error!!!\n"
                                        "checks the path "
                                        "of the reported files\n + {}".format(msg_add))
                                        
                date = time.ctime()
                log_error = open('/tmp/log_mattos-codec-base64.txt', 'w')
                log_error.write(str(date) + " " +  str(ex))
                log_error.close()
                
        run_codec_base64()
    #Function showing the system's user manual
    def on_bt_manual_clicked(self, *args):
        print("manual")
    
    #Function that takes the
    #user to the donate page
    def on_bt_donate_activate(self, *args):
        print("donate")
        os.system("firefox https://www.paypal.com/myaccount/transfer/homepage/buy/preview")
        self.lb_result.set_text("your result")
        
    #Function close dialog
    def on_bt_close_clicked(self, *args):
        self.lb_result.set_text("your result")
        os.system("nautilus {}".format(self.var_global))
        Gtk.main_quit()
        
ui.connect_signals(Handler())
window = ui.get_object("main_window")
window.show_all()

if __name__ == '__main__':
    Gtk.main()
